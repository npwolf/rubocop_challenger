# frozen_string_literal: true

module RubocopChallenger
  # Creates a pull request
  class PullRequest
    # @param user_name [String]
    #   The author name which use at the git commit
    # @param user_email [String]
    #   The email address which use at the git commit
    # @param labels [Array<String>]
    #   Will create a pull request with the labels
    # @param dry_run [Boolean]
    #   Does not create a pull request when given `true`
    def initialize(user_name, user_email, labels, dry_run = false)
      @pr_creater = Github::PrCreater.new(
        base: 'master',
        branch: "rubocop-challenge/#{timestamp}",
        user_name: user_name,
        user_email: user_email
      )
      @labels = labels
      @dry_run = dry_run
    end

    # Add and commit local files to the pull request
    #
    # @param message [String] The commit message
    # @yield Some commands where modify local files
    # @return [Object] Return result of yield if you use &block
    def commit!(message, &block)
      pr_creater.commit message, &block
    end

    # Creates a pull request for the Rubocop Challenge
    #
    # @param rule [Rubocop::Rule]
    #   The corrected rule
    # @param template_file_path [String, nil]
    #   The template file name which use to generate the pull request body
    # @return [Boolean]
    #   Return true if its successed
    def create_rubocop_challenge_pr!(rule, template_file_path = nil)
      create_pull_request!(
        title: "#{rule.title}-#{timestamp}",
        body: Github::PrTemplate.new(rule, template_file_path).generate,
        labels: labels
      )
    end

    # Creates a pull request which re-generate ".rubocop_todo.yml" with new
    # version RuboCop.
    #
    # @param before_version [String]
    #   The version of RuboCop which created ".rubocop_todo.yml" before
    #   re-generate.
    # @param after_version [String]
    #   The version of RuboCop which created ".rubocop_todo.yml" after
    #   re-generate
    # @return [Boolean]
    #   Return true if its successed
    def create_regenerate_todo_pr!(before_version, after_version)
      create_pull_request!(
        title: "Re-generate .rubocop_todo.yml with RuboCop v#{after_version}",
        body: generate_pull_request_body(before_version, after_version),
        labels: labels
      )
    end

    private

    attr_reader :pr_creater, :labels, :dry_run

    # Create a PR with description of what modification were made.
    def create_pull_request!(pr_creater_options)
      pr_creater.create_pr(pr_creater_options) unless dry_run
    end

    def generate_pull_request_body(before_version, after_version)
      <<~MARKDOWN
        Re-generated the .rubocop_todo.yml because it was generated by old version RuboCop.

        * Using RuboCop version: `#{before_version}` -> `#{after_version}`

        Auto generated by [rubocop_challenger](https://github.com/ryz310/rubocop_challenger)
      MARKDOWN
    end

    def timestamp
      @timestamp ||= Time.now.strftime('%Y%m%d%H%M%S')
    end
  end
end
